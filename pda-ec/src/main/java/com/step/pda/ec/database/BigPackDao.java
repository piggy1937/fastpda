package com.step.pda.ec.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "big_pack".
*/
public class BigPackDao extends AbstractDao<BigPack, Long> {

    public static final String TABLENAME = "big_pack";

    /**
     * Properties of entity BigPack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SaleOrderSn = new Property(1, String.class, "saleOrderSn", false, "SALE_ORDER_SN");
        public final static Property CustomerSn = new Property(2, String.class, "customerSn", false, "CUSTOMER_SN");
        public final static Property CustomerName = new Property(3, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property WordOrderSn = new Property(4, String.class, "wordOrderSn", false, "WORD_ORDER_SN");
        public final static Property CustomerOrderSn = new Property(5, String.class, "customerOrderSn", false, "CUSTOMER_ORDER_SN");
        public final static Property Tag = new Property(6, int.class, "tag", false, "TAG");
    }

    private DaoSession daoSession;


    public BigPackDao(DaoConfig config) {
        super(config);
    }
    
    public BigPackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"big_pack\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SALE_ORDER_SN\" TEXT," + // 1: saleOrderSn
                "\"CUSTOMER_SN\" TEXT," + // 2: customerSn
                "\"CUSTOMER_NAME\" TEXT," + // 3: customerName
                "\"WORD_ORDER_SN\" TEXT," + // 4: wordOrderSn
                "\"CUSTOMER_ORDER_SN\" TEXT," + // 5: customerOrderSn
                "\"TAG\" INTEGER NOT NULL );"); // 6: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"big_pack\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BigPack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String saleOrderSn = entity.getSaleOrderSn();
        if (saleOrderSn != null) {
            stmt.bindString(2, saleOrderSn);
        }
 
        String customerSn = entity.getCustomerSn();
        if (customerSn != null) {
            stmt.bindString(3, customerSn);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
 
        String wordOrderSn = entity.getWordOrderSn();
        if (wordOrderSn != null) {
            stmt.bindString(5, wordOrderSn);
        }
 
        String customerOrderSn = entity.getCustomerOrderSn();
        if (customerOrderSn != null) {
            stmt.bindString(6, customerOrderSn);
        }
        stmt.bindLong(7, entity.getTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BigPack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String saleOrderSn = entity.getSaleOrderSn();
        if (saleOrderSn != null) {
            stmt.bindString(2, saleOrderSn);
        }
 
        String customerSn = entity.getCustomerSn();
        if (customerSn != null) {
            stmt.bindString(3, customerSn);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
 
        String wordOrderSn = entity.getWordOrderSn();
        if (wordOrderSn != null) {
            stmt.bindString(5, wordOrderSn);
        }
 
        String customerOrderSn = entity.getCustomerOrderSn();
        if (customerOrderSn != null) {
            stmt.bindString(6, customerOrderSn);
        }
        stmt.bindLong(7, entity.getTag());
    }

    @Override
    protected final void attachEntity(BigPack entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BigPack readEntity(Cursor cursor, int offset) {
        BigPack entity = new BigPack( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // saleOrderSn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerSn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wordOrderSn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // customerOrderSn
            cursor.getInt(offset + 6) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BigPack entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaleOrderSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerSn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWordOrderSn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCustomerOrderSn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTag(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BigPack entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BigPack entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BigPack entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
