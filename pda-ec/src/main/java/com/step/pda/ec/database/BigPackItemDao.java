package com.step.pda.ec.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "big_pack_item".
*/
public class BigPackItemDao extends AbstractDao<BigPackItem, Long> {

    public static final String TABLENAME = "big_pack_item";

    /**
     * Properties of entity BigPackItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductSn = new Property(1, String.class, "productSn", false, "PRODUCT_SN");
        public final static Property ParentId = new Property(2, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Tag = new Property(3, int.class, "tag", false, "TAG");
    }

    private Query<BigPackItem> bigPack_ItemListQuery;

    public BigPackItemDao(DaoConfig config) {
        super(config);
    }
    
    public BigPackItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"big_pack_item\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_SN\" TEXT," + // 1: productSn
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 2: parentId
                "\"TAG\" INTEGER NOT NULL );"); // 3: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"big_pack_item\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BigPackItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productSn = entity.getProductSn();
        if (productSn != null) {
            stmt.bindString(2, productSn);
        }
        stmt.bindLong(3, entity.getParentId());
        stmt.bindLong(4, entity.getTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BigPackItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productSn = entity.getProductSn();
        if (productSn != null) {
            stmt.bindString(2, productSn);
        }
        stmt.bindLong(3, entity.getParentId());
        stmt.bindLong(4, entity.getTag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BigPackItem readEntity(Cursor cursor, int offset) {
        BigPackItem entity = new BigPackItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productSn
            cursor.getLong(offset + 2), // parentId
            cursor.getInt(offset + 3) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BigPackItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.getLong(offset + 2));
        entity.setTag(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BigPackItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BigPackItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BigPackItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "itemList" to-many relationship of BigPack. */
    public List<BigPackItem> _queryBigPack_ItemList(Long parentId) {
        synchronized (this) {
            if (bigPack_ItemListQuery == null) {
                QueryBuilder<BigPackItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                bigPack_ItemListQuery = queryBuilder.build();
            }
        }
        Query<BigPackItem> query = bigPack_ItemListQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

}
